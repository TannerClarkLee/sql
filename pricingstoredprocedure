DELIMITER $$

USE `pricing`$$

DROP PROCEDURE IF EXISTS sp_priceengine$$

CREATE DEFINER=`wcaprod`@`%` PROCEDURE sp_priceengine(par_json JSON)
prochandler_priceengine:BEGIN

/*

 +--------------------------------------+
 |  Documentation       |
 +--------------------------------------+

Parameters:

LocationId
	Description:  The locationid for the store that the pricing service is being called from
	Type: Integer
	Possible Values: NA
	Required: Yes
AccountId
	Description: The accountid for the accountid being used to make the purchase
	Type: Integer
	PossibleValues: NA
	Required: Yes
ProductIds
	Description: The productid for the product that is being priced
	Type: Array of integer products
	PossibleValues: NA
	Required: Yes

Example:

CALL sp_employeeidentity('{"LocationId":"13049","AccountId":"520","ProductIds":[942348,4994,342355]}')
>>
{
	"Items": [{
			"ProductId": 942348,
			"Cost": 56.34,
			"List": 63.43
		},
		{
			"ProductId": 4994,
			"Cost": 12.78,
			"List": 23.88
		},
		{
			"ProductId": 342355,
			"Cost": 112.65,
			"List": 132.56
		}
	]
}


*/

#--------------------------------------------------------------------------------------------------------------
# B E G I N
#--------------------------------------------------------------------------------------------------------------
DECLARE par_accountid INT(50);
DECLARE par_locationid INT(50);

DECLARE var_navigationtype VARCHAR(50);
DECLARE var_positionidentifier INT(10);

DECLARE var_iter INT(20);
DECLARE var_exit_while INT(20);
DECLARE var_len INT(20);

SET var_iter = 0;
SET var_exit_while = 0;

#outputtable
DROP TEMPORARY TABLE IF EXISTS tboutput;
CREATE TEMPORARY TABLE tboutput (json_entry JSON);


#--------------------------------------------------------------------------------------------------------------
#INITIAL JSON EXTRACTION
SET par_accountid = JSON_UNQUOTE(JSON_EXTRACT(par_json ,'$.AccountId'));
SET par_locationid = JSON_UNQUOTE(JSON_EXTRACT(par_json ,'$.LocationId'));
SET var_len = (SELECT JSON_LENGTH(JSON_EXTRACT(par_json, '$.ProductIds')));

#Parameter Check
IF par_accountid IS NULL THEN
	SIGNAL SQLSTATE '45000'
	SET MESSAGE_TEXT = "[DEVELOPER] Error. No AccountId included";
	LEAVE prochandler_priceengine;
END IF;
IF par_memberid IS NULL THEN
	SIGNAL SQLSTATE '45000'
	SET MESSAGE_TEXT = "[DEVELOPER] Error. No LocationId included";
	LEAVE prochandler_priceengine;
END IF;


loop_while1:WHILE var_iter < var_len DO #While the iterator is less than the number of items in the input array
	SET var_exit_while = var_exit_while + 1;
	IF var_exit_while > 10000 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = "[DEVELOPER] Error. Exceeded Number of Price Lookups (>10000)";
		LEAVE prochandler_priceengine;
	END IF;

	SET @varcost = NULL;
	SET @varlist = NULL;
	SET @productid = NULL;

	#Get productid from jsonarray
	SET @st = CONCAT("SET @productid = JSON_UNQUOTE(JSON_EXTRACT('",par_json,"','$.ProductIds[",var_iter,"]'))");
	PREPARE stmt FROM @st;
	EXECUTE stmt;

	#Start Pricing Function
	SET @promo = NULL;
	SET @pricelevel = NULL;

	#pricelevel
	SELECT pricelevel into @pricelevel from pricing.pricelevel WHERE accountid = @accountid;

	IF @pricelevel IS NULL THEN
		SET @pricelevel = 8;
	END IF;

	SELECT promoprice, list INTO @promo,@list FROM pricing.promoprice WHERE productid = @productid AND StartDate>=NOW() and EndDate<NOW();

	IF @promo IS NULL THEN
		SELECT Cost,List into @cost,@list FROM pricing.productpricing WHERE productid = @productid and PriceLevel = @pricelevel;
	ELSE
		SET @cost = @promo;
	END IF;


	INSERT INTO tboutput
	SELECT JSON_OBJECT("ProductId",@productid,"Cost",@cost,"List",@list);

	SET var_iter = var_iter + 1; #increase iterator
END WHILE;

SELECT JSON_PRETTY(JSON_OBJECT("Items",JSON_ARRAYAGG(json_entry))) as body FROM tboutput;

END$$

DELIMITER ;